                        NB: This is not the markdow of the project, it is just my personal
                            documentation as I continue working on the project.
                            An updated markdown will be created once I'm done with the project



In Alien Invasion, the player controls a rocket ship that appears
at the bottom center of the screen. The player can move the ship
right and left using the arrow keys and shoot bullets using the
spacebar. When the game begins, a fleet of aliens fills the sky
and moves across and down the screen. The player shoots and
destroys the aliens. If the player shoots all the aliens, a new fleet
appears that moves faster than the previous fleet. If any alien hits
the player’s ship or reaches the bottom of the screen, the player
loses a ship. If the player loses three ships, the game ends.

> > > Walkthrough < < <

First we import the sys and pygame modules.
The pygame module contains the functionality we need to run the game
The sys module will help us exit the game when the player quits

// Beginning

The game Alien invasion, starts as a class AlienInvasion
in the __init__ method, the pygame.init() function initializes the background settigs that
pygame needs to work correctly

> > Then we call pygame.display.set_mode() to create a display window, 
    on which we’ll draw all the game’s graphical elements.

    The argument (1200,800) is a tuple that defines the dimensions for the game window
    which will be 1200px wide by 800px high.

    We assign these display window to the attribute self.screen, so that it will be available
    to all methods in the class.

NB: The object we assigned to self.screen(the display window), is called a surface
    A surface in pygame is a part of the screen where a game element can be displayed

    Each element in the game like an alien or a ship, is its own surface
    The surface returned by display.set_mode(), represents the entire game window

    When we activate the game's animation loop, this surface will be redrawn on every pass
    through the loop so it can me updated by any changes triggered by user input

> > We then define the run_game() method, which controlls the game.
    This method contains a while loop that runs continually. 

    The while loop contains an event loop and code that manages screen updates.
    An event is an action that the user performs while playing the game, such as pressing a key or moving the mouse.
   
    To make our program respond to events, we write this event loop to listen for events and perform appropriate
    tasks depending on the kinds of events that occur.

    To access the events that Pygame detects, we’ll use the pygame.event.get() function. 
    This function returns a list of events that have taken place since the last time that this function was called.
    
    Any keyboard or mouse event will cause this for loop to run. Inside the loop, we’ll write a series of if
    statements to detect and respond to specific events.
    
    For example, when the player clicks the game window’s close button, a pygame.QUIT event is detected and we call sys.exit() to exit the game.

    The call to pygame.display.flip() tells Pygame to make the most recently drawn screen visible. 
    In this case, it simply draws an empty screen on each pass through the while loop, erasing the old screen so only the new screen is visible.
    
    When we move the game elements around, pygame.display.flip() continually updates the display to show the new positions of game
    elements and hides the old ones, creating the illusion of smooth movement.
    
    At the end of the file, we create an instance of the game, and then call run_game().
    We place run_game() in an if block that only runs if the file is called directly. 
    When you run this alien_invasion.py file, you should see an empty Pygame window.


//  Setting the background color
By default, pygame will display a black background color.

To change the background color, we create a variable in the __init__ method self.bg_color
and assign it any rgb value we want eg (230,230,230).

We also have to update the run_game method, and redraw the screen with the new color in each pass of the while loop
We fill the screen with the background color using the fill() method, which acts on a surface and takes only one argument: a color.



// Adding the settings class
We import Settings into the main program file. 

Then we create an instance of Settings and assign it to self.settings, after making the call to pygame.init().

When we create a screen surface, we use the screen_width and screen_height attributes of self.settings, and then we use self.settings to
access the background color when filling the screen as well.

When you run alien_invasion.py now you won’t yet see any changes,
because all we’ve done is move the settings we were already using else­ where. 

Now we’re ready to start adding new elements to the screen.

//  creating the ship class
> > In pygame everything including game elements, are treated like rect­angles (rects), even if they’re not exactly shaped like rectangles.
    Treating an element as a rectangle is efficient because rectangles are simple geo­metric shapes. 
    
    When Pygame needs to figure out whether two game ele­ments have collided, for example, it can do this more quickly if it treats each object as a rectangle. 
    This approach usually works well enough that no one playing the game will notice that we’re not working with the exact shape of each game element. 
    We’ll treat the ship and the screen as rect­angles in this class.

First off > >
    
    We import the pygame module before defining the class. 
    We then define the __init__() method of Ship which takes two parameters: the self reference and a reference to the current instance of the AlienInvasion class. 
    This will give Ship access to all the game resources defined in AlienInvasion class.
    We  then assign the screen(self.screen) to an attribute of Ship, so we can access it easily in all the methods in this class.
    
Next > >

    We access the screen’s rect attribute using the get_rect() method and assign it to self.screen_rect.
    
    Doing so allows us to place the ship in the correct location on the screen.
    
    To load the image, we call pygame.image.load() and give it the loca­tion of our ship image.
    
    This function returns a surface representing the ship, which we assign to self.image.
    
    When the image is loaded, we call get_rect() to access the ship surface’s rect attribute so we can later use it to place the ship.

    When you’re working with a rect object, you can use the x- and y-coordi­nates of the top, bottom, left, and right edges of the rectangle, as well as the
    center, to place the object. 
    
    You can set any of these values to establish the current position of the rect.
    
    When you’re centering a game element, work with the center , centerx , or centery attributes of a rect.
    When you’re working at an edge of the screen, work with the top, bottom, left, or right attributes.
    
    There are also attributes that combine these properties, such as midbottom, midtop, midleft, and midright. 
    When you’re adjusting the horizontal or verti­cal placement of the rect, you can just use the x and y attributes, which are the x- and y-coordinates of its top-left corner. 
    These attributes spare you from having to do calculations that game developers formerly had to do manually, and you’ll use them often.

    We’ll position our ship at the bottom center of the screen.
    
    To do so,make the value of self.rect.midbottom match the midbottom attribute of the screen’s rect.
    
    Pygame uses these rect attributes to position the ship image so it’s centered horizontally and aligned with the bottom of the screen.

    We then define the blitme() method, which draws the image to the screen at the position specified by self.rect .

//  Moving the ship

Next, we’ll give the player the ability to move the ship right and left.
We’ll write code that responds when the player presses the right or left arrow key.

Whenever the player presses a key, that keypress is registered in Pygame as
an event.

Each event is picked up by the pygame.event.get() method. 

We need to specify in our _check_events() method what kind of events we want the game to check for.

Each keypress is registered as a KEYDOWN event.

When Pygame detects a KEYDOWN event, we need to check whether the key that was pressed is one that triggers a certain action. 

For example, if the player presses the right arrow key, we want to increase the ship’s rect.x (x co-ordinates) value to move the ship to the right.

To do this, we'll add an elif block, to our  _check_events helper method, that will check if the event type is key down.

If true, it will trigger another if statement to check if the key is left key or right key

Before proceeding further, we'll need to modify the class Ship

We'll add two flags, moving_right and moving_left which will both be initialised to False

Then we'll add an update function to the ship's class that will:
    increment the ship's rec x coordinates if moving_right is true
    decrement the ship's rec x coordinates if moving_left is true

This will help us to continually move the ship to the right if the right key is pressed down
and continually move the ship to the left if left key is pressed down

We can then continue modifying our _check_events helper function for the movement

so if the event is key down and key pressed down is right, we'll set self.ship.moving_right to true
and if the key pressed down is left, we'll set the self.ship.moving_left to true

We'll also add another condition to check for keyup events.
This means that the user has stopped pressing the key down and the ship needs to halt

so if event is keyup and key pressed down in right, we'll set self.ship.moving_right to False
and if key pressed down is left, we'll set the self.ship.moving_left to False

to make sure that our events ar updated continually, we'll call the self.ship.update() method in the while loop
inside the run game method.





//  ADJUSTING SHIP'S SPEED
We will then add an attribute self.ship_speed to the settings class and initialize it to 1.5

We will then create a settings attribute for Ship , so we can use it in update().

Because we’re adjusting the position of the ship by fractions of a pixel, we
need to assign the position to a variable that can store a decimal value. 

You can use a decimal value to set an attribute of rect , but the rect will only
keep the integer portion of that value. 

To keep track of the ship’s position accurately, we define a new self.x attribute that can hold decimal values v.

We use the float() function to convert the value of self.rect.x to a decimal
and assign this value to self.x .

Now when we change the ship’s position in update(), the value of self.x
is adjusted by the amount stored in settings.ship_speed.

After self.x has been updated, we use the new value to update self.rect.x , which controls the position of the ship x. Only the integer portion of self.x will be stored
in self.rect.x.


//  Limiting the ship's range
To limit the range at which the ship can move, and prevent it from disappearing at the screen's edge
we can do this by updating th update() method.ship.

we'll write an if statement to check the condition:

if self.moving_right and self.rect.right < self.screen_rect.right:

    self.x += self.settings.ship_speed

if self.moving_left and self.rect.left > 0:

This code checks the position of the ship before changing the value of self.x.

The code self.rect.right returns the x-coordinate of the right edge of the ship’s rect.

If this value is less than the value returned by self.screen_rect.right,
the ship hasn’t reached the right edge of the screen.

The same goes for the left edge: if the value of the left side of the rect is greater than
zero, the ship hasn’t reached the left edge of the screen v.
This ensures the ship is within these bounds before adjusting the value of self.x .


//  Exiting with keyboard q
To allow users to quit by pressing the 'q' button, we can add another elif block, in the check_down_keys method
that will call the sys.exit() method if the key pressed down is 'q'

//  Shooting bullets

The Bullet class inherits from Sprite, which we import from the pygame.sprite module.

When you use sprites, you can group related elements in your game and act on all the grouped elements at once.

To create a bulletinstance, __init__() needs the current instance of AlienInvasion, and we call super() to inherit properly from Sprite.

We also set attributes for the screen and settings objects, and for the bullet’s color.

At u, we create the bullet’s rect attribute.

The bullet isn’t based on an image, so we have to build a rect from scratch using the pygame.Rect() class.

This class requires the x and y coordinates of the top-left corner of the rect, and the width and height of the rect.

We initialize the rect at (0, 0), but we’ll move it to the correct location in the next line, because the bullet’s
position depends on the ship’s position. 

We get the width and height of the bullet from the values stored in self.settings .

At v, we set the bullet’s midtop attribute to match the ship’s midtop attri­bute.

This will make the bullet emerge from the top of the ship, making it look like the bullet is fired from the ship. We store a decimal value for the
bullet’s y-coordinate so we can make fine adjustments to the bullet’s speed w.